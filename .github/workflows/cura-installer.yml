name: Cura Installer
run-name: ${{ inputs.cura_conan_version }} by @${{ github.actor }}

on:
    workflow_dispatch:
        inputs:
            cura_conan_version:
                description: 'Cura Conan Version'
                default: 'cura/latest@ntcong/testing'
                required: true
            conan_args:
                description: 'Conan args: eq.: --require-override'
                default: ''
                required: false
            conan_config:
                description: 'Conan config branch to use'
                default: ''
                required: false
            enterprise:
                description: 'Build Cura as an Enterprise edition'
                required: true
                default: false
                type: boolean
            staging:
                description: 'Use staging API'
                required: true
                default: false
                type: boolean
            installer:
                description: 'Create the installer'
                required: true
                default: false
                type: boolean

    # Run the nightly at 3:25 UTC on working days
    #FIXME: Provide the same default values as the workflow dispatch
#    schedule:
#    - cron: '25 3 * * 1-5'

env:
    CONAN_LOGIN_USERNAME_CURA: ${{ secrets.CONAN_USER }}
    CONAN_PASSWORD_CURA: ${{ secrets.CONAN_PASS }}
    CONAN_LOGIN_USERNAME_CURA_CE: ${{ secrets.CONAN_USER }}
    CONAN_PASSWORD_CURA_CE: ${{ secrets.CONAN_PASS }}
    CONAN_LOG_RUN_TO_OUTPUT: 1
    CONAN_LOGGING_LEVEL: ${{ inputs.conan_logging_level }}
    CONAN_NON_INTERACTIVE: 1
    CODESIGN_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}
    CURA_CONAN_VERSION: ${{ inputs.cura_conan_version }}
    ENTERPRISE: ${{ inputs.enterprise }}
    STAGING: ${{ inputs.staging }}

jobs:
    cura-installer-create:
        runs-on: ${{ matrix.os }}

        strategy:
            fail-fast: false
            matrix:
                include:
                    - { os: windows-2022, os_id: 'win64' }

        steps:
            -   name: Checkout
                uses: actions/checkout@v3

            -   name: Setup Python and pip
                uses: actions/setup-python@v4
                with:
                    python-version: '3.10.x'
                    cache: 'pip'
                    cache-dependency-path: .github/workflows/requirements-conan-package.txt

            -   name: Install Python requirements for runner
                run: pip install -r .github/workflows/requirements-conan-package.txt

            -   name: Use Conan download cache (Powershell)
                if: ${{ runner.os == 'Windows' }}
                run: conan config set storage.download_cache="C:\Users\runneradmin\.conan\conan_download_cache"


            -   name: Cache Conan local repository packages (Powershell)
                uses: actions/cache@v3
                if: ${{ runner.os == 'Windows' }}
                with:
                    path: |
                        C:\Users\runneradmin\.conan\data
                        C:\.conan
                        C:\Users\runneradmin\.conan\conan_download_cache
                    key: conan-${{ runner.os }}-${{ runner.arch }}-installer-cache


            -   name: Create the default Conan profile
                run:  conan profile new default --detect


            -   name: Clean Conan local cache
                if: ${{ inputs.conan_clean_local_cache }}
                run: conan remove "*" -f

            -   name: Get Conan configuration from branch
                if: ${{ inputs.conan_config_branch != '' }}
                run: conan config install https://github.com/Ultimaker/conan-config.git -a "-b ${{ inputs.conan_config_branch }}"

            -   name: Get Conan configuration
                if: ${{ inputs.conan_config_branch == '' }}
                run: conan config install https://github.com/Ultimaker/conan-config.git

            -   name: Clone SuperCuraEngine
                run: git clone https://github.com/ntcong/SuperCuraEngine.git

            -   name: Create the CuraEngine Packages
                run: conan create . curaengine/5.2.2@ntcong/testing --build=missing --update --test-folder=None
                working-directory: SuperCuraEngine

            -   name: Create CuraEngine Alias
                run: conan alias curaengine/latest@ntcong/testing curaengine/5.2.2@ntcong/testing

            -   name: Export conan install
                run: conan export . $Env:CURA_CONAN_VERSION

            -   name: Create the Packages (Powershell)
                if: ${{ runner.os == 'Windows' }}
                run: conan install $Env:CURA_CONAN_VERSION ${{ inputs.conan_args }} --build=missing --update -if cura_inst -g VirtualPythonEnv -o cura:enterprise=$Env:ENTERPRISE -o cura:staging=$Env:STAGING --json "cura_inst/conan_install_info.json"

            -   name: Set Environment variables for Cura (Powershell)
                if: ${{ runner.os == 'Windows' }}
                run: |
                    .\cura_inst\Scripts\activate_github_actions_env.ps1
                    .\cura_inst\Scripts\activate_github_actions_version_env.ps1


            -   name: Install OpenSSL shared
                run: conan install openssl/1.1.1l@_/_ --build=missing --update -o openssl:shared=True -g deploy

            -   name: Copy OpenSSL shared (Powershell)
                if: ${{ runner.os == 'Windows' }}
                run: |
                    cp openssl/bin/*.dll ./cura_inst/Scripts/
                    cp openssl/lib/*.lib ./cura_inst/Lib/

            -   name: Create the Cura dist
                run: pyinstaller ./cura_inst/Ultimaker-Cura.spec

            -   name: Archive the artifacts (Powershell)
                if: ${{ github.event.inputs.installer == 'false' && runner.os == 'Windows' }}
                run: Compress-Archive -Path ".\Ultimaker-Cura" -DestinationPath ".\Ultimaker-Cura-$Env:CURA_VERSION_FULL-${{ matrix.os_id }}.zip"
                working-directory: dist

            -   name: Create the Windows exe installer (Powershell)
                if: ${{ github.event.inputs.installer == 'true' && runner.os == 'Windows' }}
                run: |
                    python ..\cura_inst\packaging\NSIS\create_windows_installer.py ../cura_inst . "Ultimaker-Cura-$Env:CURA_VERSION_FULL-${{ matrix.os_id }}.exe"
                working-directory: dist

            -   name: Upload the artifacts
                uses: actions/upload-artifact@v3
                with:
                    name: Ultimaker-Cura-${{ env.CURA_VERSION_FULL }}-${{ matrix.os_id }}
                    path: |
                        dist/*.tar.gz
                        dist/*.zip
                        dist/*.exe
                        dist/*.msi
                        dist/*.dmg
                        dist/*.AppImage
                        dist/*.asc
                    retention-days: 5
